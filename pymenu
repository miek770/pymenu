#!/usr/bin/python3
# -*- coding: utf-8 -*-

"""
Script:       pymenu
Version:      1.5
Author:       Michel Lavoie
Created:      2013-03-20
Description:  This script generates an application menu with dmenu from the
              *.desktop files in /usr/share/applications, sorted by category.
              It is meant to complement i3's base menu (which doesn't list
              applications by category).
Requirements: python3
              dmenu2
"""

import os, sys, sqlite3, configparser
import subprocess as sub
from optparse import OptionParser

# Configuration
# To limit the categories to those defined here:
# http://standards.freedesktop.org/menu-spec/latest/apa.html
main_cats = list()
main_cats.append('AudioVideo')
main_cats.append('Audio')
main_cats.append('Video')
main_cats.append('Development')
main_cats.append('Education')
main_cats.append('Game')
main_cats.append('Graphics')
main_cats.append('Network')
main_cats.append('Office')
main_cats.append('Science')
main_cats.append('Settings')
main_cats.append('System')
main_cats.append('Utility')

#==============================================================================
# Class:       Dbapps
# Description: Wrapper for the Sqlite3 database containing the installed
#              applications references.
#==============================================================================
class Dbapps:
    def __init__(self, dbase_path, limit_to_main=False, desktop_path='/usr/share/applications/'):
        self.limit_to_main = limit_to_main
        self.desktop_path = desktop_path
        self.path = dbase_path
        if os.path.exists(self.path):
            self.conn = sqlite3.connect(self.path)
            self.cursor = self.conn.cursor()
        else:
            self.rescan()

    def close(self):
        self.cursor.close()

    # Re-create the database and rescan the *.desktop files
    def rescan(self):
        try:
            os.remove(self.path)
        except FileNotFoundError:
            pass
        self.conn = sqlite3.connect(self.path)
        self.cursor = self.conn.cursor()
        
        self.cursor.executescript("""
                                  CREATE TABLE apps
                                  (
                                   id INTEGER PRIMARY KEY AUTOINCREMENT,
                                   name TEXT NOT NULL UNIQUE,
                                   comment TEXT,
                                   path TEXT
                                  );

                                  CREATE TABLE cats
                                  (
                                   id INTEGER PRIMARY KEY AUTOINCREMENT,
                                   name TEXT NOT NULL UNIQUE
                                  );

                                  CREATE TABLE app_cat
                                  (
                                   id INTEGER PRIMARY KEY AUTOINCREMENT,
                                   app INTEGER,
                                   cat INTEGER
                                  )
                                  """)

        applications = os.listdir(self.desktop_path)

        #print(applications)
        for app in applications:
            if app[-8:] == '.desktop':
                #print('***', app, '***')
                config = configparser.RawConfigParser()
                config.read(os.path.join(self.desktop_path, app))

                try:
                    n = config['Desktop Entry']['Name'].capitalize()
                    p = config['Desktop Entry']['Exec'].split('%')[0]
                except KeyError:
                    #print('KeyError:', app)
                    continue

                try:
                    c = config['Desktop Entry']['Comment'].capitalize()
                except KeyError:
                    c = ''

                try:
                    categories = config['Desktop Entry']['Categories'].split(';')[:-1]
                    #print('Categories:', categories)
                    if self.limit_to_main:
                        to_be_popped = list()
                        for cat in categories:
                            if cat not in main_cats:
                                #print(cat, 'is not in main_cats')
                                to_be_popped.append(categories.index(cat))
                                #print('Poped categories:', categories)
                        to_be_popped.reverse()
                        for index in to_be_popped:
                            categories.pop(index)
                        if len(categories) == 0:
                            categories = ('Uncategorized',)
                except KeyError:
                    categories = ('Uncategorized',)
           
                #print('Adding app:', n) 
                self.cursor.execute("""INSERT OR IGNORE INTO apps
                                    (name, comment, path) VALUES
                                    (?, ?, ?)""",
                                    [n, c, p])

                qry = self.cursor.execute("""SELECT id FROM apps
                                          WHERE name=?""",
                                          [n])
                app_id = qry.fetchone()[0]

                for cat in categories:
                    if len(cat):
                        c = cat.capitalize()
                        #print('Adding category:', cat)
                        self.cursor.execute("""INSERT OR IGNORE INTO cats
                                            (name) VALUES
                                            (?)""",
                                            [c])

                        qry = self.cursor.execute("""SELECT id FROM cats
                                                  WHERE name=?""",
                                                  [c])
                        cat_id = qry.fetchone()[0]

                        #print('Adding app_cat:', app, cat)
                        self.cursor.execute("""INSERT OR IGNORE INTO app_cat
                                            (app, cat) VALUES
                                            (?, ?)""",
                                            [app_id, cat_id])
        self.conn.commit()

    # Return all categories, sorted by name
    def get_cats(self):
        qry = self.cursor.execute("""SELECT name FROM cats ORDER BY name""")
        return qry.fetchall()

    # Return all applications, sorted by name
    # If 'cat' is specified only the applications in this category are returned
    def get_apps(self, cat=None):
        if cat is None:
            qry = self.cursor.execute("""SELECT * FROM apps ORDER BY name""")
        else:
            qry = self.cursor.execute("""SELECT * FROM apps
                                      LEFT OUTER JOIN app_cat ON app=apps.id
                                      LEFT OUTER JOIN cats ON cats.id=cat
                                      WHERE cats.name=?
                                      ORDER BY apps.name""",
                                      [cat])
        return qry.fetchall()

    # Count the number of applications
    # If 'cat' is specified only the applications in this category are returned
    def count_apps(self, cat=None):
        if cat is None:
            qry = self.cursor.execute("""SELECT * FROM apps ORDER BY name""")
        else:
            qry = self.cursor.execute("""SELECT * FROM apps
                                      LEFT OUTER JOIN app_cat ON app=apps.id
                                      LEFT OUTER JOIN cats ON cats.id=cat
                                      WHERE cats.name=?
                                      ORDER BY apps.name""",
                                      [cat])
        return len(qry.fetchall())

    # Get the 'Exec' statement from the *.desktop file
    def get_path(self, app):
        qry = self.cursor.execute("""SELECT path FROM apps
                                  WHERE name=?""",
                                  [app])
        return qry.fetchone()[0]

#==============================================================================
# Class:       Dmenu
# Description: Wrapper around dmenu which generates the application menus with
#              the information stocked in the Dbapps class and handles dmenu
#              itself.
#==============================================================================
class Dmenu:
    def __init__(self, dbase_path, lines, width, limit_to_main=False, desktop_path='/usr/share/applications/'):
        self.limit_to_main = limit_to_main
        self.desktop_path = desktop_path
        self.db = Dbapps(dbase_path, limit_to_main=self.limit_to_main, desktop_path=self.desktop_path)
        self.populate()
        self.options = ' -i -b -l ' + str(lines) + ' -w ' + str(width)

    # Run dmenu with the appropriate input/options
    def run(self):
        p = sub.Popen('echo "' + self.menu['main'][:-1] + '" | dmenu' + self.options,
                      shell=True,
                      stdout=sub.PIPE,
                      stderr=sub.PIPE,
                      universal_newlines=True)
        submenu = p.communicate()[0].strip('\n')

        if len(submenu):
            if submenu == 'Refresh menu':
                self.db.rescan()
            else:
                p = sub.Popen('echo "' + self.menu[submenu][:-1] + '" | dmenu' + self.options,
                              shell=True,
                              stdout=sub.PIPE,
                              stderr=sub.PIPE,
                              universal_newlines=True)
                selection = p.communicate()[0].strip('\n')

                if len(selection):
                    path = self.db.get_path(selection)
                    p = sub.Popen(path, shell=True)

    # Generate the main menu and submenus 
    def populate(self):
        self.menu = dict()
        cats = self.db.get_cats()
        self.menu['main'] = str()
        for cat in cats:
            self.menu['main'] += str(cat[0]) + '\n'
            self.menu[str(cat[0])] = str()
            for app in self.db.get_apps(cat[0]):
                self.menu[str(cat[0])] += str(app[1]) + '\n'
        self.menu['main'] += 'Refresh menu\n'

#==============================================================================
# Function:    main
# Description: Main routine.
#==============================================================================
def main():
    # Options definition
    usage = 'usage: %prog [OPTION]...'
    parser = OptionParser(usage=usage)
    parser.add_option('-l', '--lines', dest='lines', action='store', help='Specify the maximal number of lines to show in the menu')
    parser.add_option('-w', '--width', dest='width', action='store', help='Specify the width of the menu')
    parser.add_option('-m', '--main', dest='limit_to_main', action='store_true', help='Limit the categories to the standard main categories')
    parser.add_option('-p', '--path', dest='desktop_path', action='store', help='Specifiy the path to your *.desktop files')
    (options, args) = parser.parse_args()

    # Options handling
    if options.lines:
        lines = options.lines
    else:
        lines = 50
    if options.width:
        width = options.width
    else:
        width = 200
    if options.limit_to_main:
        limit_to_main = True
    else:
        limit_to_main = False
    if options.desktop_path:
        desktop_path = options.desktop_path
    else:
        desktop_path = '/usr/share/applications'

    # Main calls
    try:
        dbase_path = os.path.join(os.getenv('HOME'), '.pymenu.db')
        dmenu = Dmenu(dbase_path=dbase_path,
                      lines=lines,
                      width=width,
                      limit_to_main=limit_to_main,
                      desktop_path=desktop_path)
        dmenu.run()

    # Make sure that the database is closed properly, whatever happens
    finally:
        dmenu.db.close()

if __name__ == '__main__':
    main()
